{"version":3,"sources":["Components/Input/index.js","Components/Form/index.js","Components/Button/index.js","redux/actions/auth.js","Containers/Pages/Login.js","Components/Loading/index.js","Components/Card/index.js","Components/Modal/index.js","Containers/Pages/Order.js","redux/actions/packs.js","Containers/Pages/Admin.js","Containers/Pages/Logout.js","redux/actions/prevPage.js","Components/Header/index.js","App.js","serviceWorker.js","redux/reducers/auth.js","redux/reducers/loading.js","redux/reducers/packs.js","redux/reducers/index.js","redux/actions/loading.js","redux/reducers/prevPage.js","redux/store/index.js","index.js"],"names":["Input","className","this","props","modal","full","type","placeholder","onChange","name","Component","Form","bind","e","target","value","onSubmit","preventDefault","inputs","map","i","label","key","children","Button","large","onClick","text","updateAuth","auth","Login","state","username","password","alert","user","email","setState","redirectTo","isAdmin","val","to","pathname","connect","store","loading","prevPage","dispatch","bindActionCreators","Loading","alt","Card","add","title","ReactModal","Modal","isOpen","open","onRequestClose","toggle","style","content","maxWidth","maxHeight","overlay","display","justifyContent","alignItems","background","zIndex","contentLabel","Order","size","handleOrder","handleCustomOrder","toggleOrderSuccessModal","setTimeout","id","packs","find","p","Number","isOrderSuccessModalOpen","remainingSize","itemised","total","ratedPacks","getBestPacksForSize","lowestCanCoverIt","forEach","pack","qty","sortQtyAndSweets","sort","a","b","sweets","chosenPack","item","wastage","Math","abs","qKey","Object","keys","push","sizes","ceil","addPack","removePack","Admin","isAddModalOpen","handleDelete","handleAdd","toggleAddModal","window","confirm","Logout","updatePrevPage","path","Header","withRouter","handleLogin","handleLogout","handleAdmin","prevProps","location","App","exact","component","render","Boolean","hostname","match","initialState","page","rootReducer","combineReducers","action","newState","assign","newPacks","persistConfig","storage","whitelist","persistedReducer","persistReducer","createStore","persistor","persistStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.acae8cc2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Input extends Component {\n    render() {\n        return (\n            <input\n                className={`input ${this.props.modal ? \"input--large\" : \"\"}${\n                    this.props.full ? \"input--full\" : \"\"\n                }`}\n                type={this.props.type}\n                placeholder={this.props.placeholder}\n                onChange={this.props.onChange}\n                name={this.props.name}\n            />\n        );\n    }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nimport Input from \"../Input\";\n\nclass Form extends Component {\n    constructor() {\n        super();\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.props.onChange(e.target.name, e.target.value);\n    }\n\n    render() {\n        return (\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                }}\n                className={`form ${this.props.modal ? \"form--modal\" : \"\"}${\n                    this.props.full ? \"form--full\" : \"\"\n                }`}\n            >\n                {this.props.inputs.map((i) => (\n                    <Input\n                        type={i.type}\n                        label={i.label}\n                        placeholder={i.placeholder}\n                        onChange={this.onChange}\n                        key={i.label}\n                        name={i.name}\n                        full={this.props.full}\n                        modal={this.props.modal}\n                    />\n                ))}\n                {this.props.children}\n            </form>\n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\n\nclass Button extends Component {\n    render() {\n        return (\n            <button\n                className={`button ${this.props.large ? \"button--large\" : \"\"}`}\n                onClick={this.props.onClick}\n            >\n                {this.props.text}\n            </button>\n        );\n    }\n}\n\nexport default Button;\n","/* Action Types */\nexport const UPDATE_AUTH = \"UPDATE_AUTH\";\n\n/* Action Creators */\nexport function updateAuth(auth) {\n    return { type: UPDATE_AUTH, auth };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\n\nimport Form from \"../../Components/Form\";\nimport Button from \"../../Components/Button\";\n\nimport { updateAuth } from \"./../../redux/actions/auth\";\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: \"\",\n            password: \"\",\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(e) {\n        e.preventDefault();\n        const { username, password } = this.state;\n\n        if (!username || !password)\n            return alert(\"Please enter your username and password\");\n\n        if (password === \"password\") {\n            if (username === \"user\") {\n                this.props.updateAuth({\n                    user: { username: \"user\", email: \"user@test.co\" },\n                });\n                return this.setState({ redirectTo: \"/ssc/order\" });\n            }\n            if (username === \"admin\") {\n                this.props.updateAuth({\n                    user: {\n                        username: \"admin\",\n                        email: \"admin@test.co\",\n                    },\n                    isAdmin: true,\n                });\n                return this.setState({ redirectTo: \"/ssc/admin\" });\n            }\n        }\n\n        alert(\"Incorrect details\");\n    }\n\n    onChange(name, val) {\n        this.setState({\n            [name]: val,\n        });\n    }\n\n    render() {\n        if (this.state.redirectTo)\n            return <Redirect to={{ pathname: this.state.redirectTo }} />;\n\n        return (\n            <div className=\"centered\">\n                <div className=\"title\">Login</div>\n                <div className=\"clues\">\n                    <p>Admin: admin&password</p>\n                    <p>User: user&password</p>\n                </div>\n                <Form\n                    onChange={this.onChange}\n                    inputs={[\n                        {\n                            type: \"text\",\n                            name: \"username\",\n                            placeholder: \"Enter your username\",\n                            label: \"Username\",\n                        },\n                        {\n                            type: \"password\",\n                            name: \"password\",\n                            placeholder: \"Enter your password\",\n                            label: \"Password\",\n                        },\n                    ]}\n                >\n                    <Button onClick={this.onClick} text=\"Login\" />\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading, prevPage } = store;\n    return { auth, loading, prevPage };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateAuth: bindActionCreators(updateAuth, dispatch),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n    render() {\n        return (\n            <div className=\"page_loading\">\n                <div className=\"App-logo\" alt=\"logo\" />\n            </div>\n        );\n    }\n}\n\nexport default Loading;\n","import React, { Component } from \"react\";\n\nimport \"./card.scss\";\n\nclass Card extends Component {\n    render() {\n        if (this.props.add)\n            return (\n                <div className=\"card card--add\" onClick={this.props.onClick}>\n                    <div className=\"card_body card--add_body\">\n                        Add a {this.props.title}\n                    </div>\n                    <p className=\"add\">+</p>\n                </div>\n            );\n        return (\n            <div className=\"card\">\n                <div className=\"card_title\">{this.props.title}</div>\n                <div className=\"card_body\">{this.props.children}</div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport * as ReactModal from \"react-modal\";\nimport \"./modal.scss\";\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nReactModal.setAppElement(\"#root\");\n\nclass Modal extends Component {\n    render() {\n        return (\n            <ReactModal\n                isOpen={this.props.open}\n                onRequestClose={this.props.toggle}\n                style={{\n                    content: {\n                        maxWidth: \"580px\",\n                        maxHeight: \"300px\",\n                    },\n                    overlay: {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        background: \"rgba(0, 0, 0, 0.53)\",\n                        zIndex: 1000,\n                    },\n                }}\n                contentLabel=\"Example Modal\"\n            >\n                <div className=\"inner\">{this.props.children}</div>\n            </ReactModal>\n        );\n    }\n}\n\nexport default Modal;\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nimport Loading from \"../../Components/Loading\";\nimport Card from \"../../Components/Card\";\nimport Button from \"../../Components/Button\";\nimport Form from \"../../Components/Form\";\nimport Modal from \"../../Components/Modal\";\n\nclass Order extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading: true,\n            size: \"\",\n        };\n\n        this.handleOrder = this.handleOrder.bind(this);\n        this.handleCustomOrder = this.handleCustomOrder.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.toggleOrderSuccessModal = this.toggleOrderSuccessModal.bind(this);\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ loading: false });\n        }, 1500);\n    }\n\n    onChange(name, val) {\n        this.setState({ [name]: val });\n    }\n\n    handleOrder(id) {\n        if (!this.props.auth.user)\n            return this.setState({ redirectTo: \"/ssc/login\" });\n        if (this.props.auth.isAdmin) return alert(\"Login to a user account.\");\n        this.setState({\n            size: this.props.packs.find((p) => p.id === Number(id)).size,\n            isOrderSuccessModalOpen: true,\n        });\n    }\n\n    handleCustomOrder() {\n        if (!this.props.auth.user)\n            return this.setState({ redirectTo: \"/ssc/login\" });\n        if (this.props.auth.isAdmin) return alert(\"Login to a user account.\");\n        if (!this.state.size) return alert(\"Please enter a qty.\");\n        if (!Number(this.state.size))\n            return alert(\"Please enter a numeric value.\");\n\n        if (this.props.packs.find((p) => p.size === Number(this.state.size))) {\n            return this.setState({\n                isOrderSuccessModalOpen: true,\n            });\n        }\n\n        let size = Number(this.state.size);\n        let remainingSize = size;\n        let itemised = [];\n        let total = 0;\n\n        while (remainingSize > 0) {\n            let ratedPacks = this.getBestPacksForSize(remainingSize);\n\n            let lowestCanCoverIt = true;\n            // Check if all the Qtys are 1\n            ratedPacks.forEach((pack) => {\n                if (pack.qty !== 1) lowestCanCoverIt = false;\n            });\n\n            // If it only takes one of any of our packs then our lowest qty pack can cover it\n            if (lowestCanCoverIt) {\n                return this.setState({\n                    itemised: [{ qty: 1, pack: ratedPacks[0].pack }],\n                    total: ratedPacks[0].pack.size,\n                    isOrderSuccessModalOpen: true,\n                });\n            }\n\n            // Else check the wastage of each option\n\n            // Sort packs , first by Qty needed to fulfill size and then by amount of sweets it will provide\n            // Doing this means it prefers the least amount of packaging\n            let sortQtyAndSweets = ratedPacks\n                .sort((a, b) => a.qty - b.qty)\n                .sort((a, b) => a.sweets - b.sweets);\n\n            let chosenPack = false;\n            // Loop through the sorted pack\n            sortQtyAndSweets.forEach((item, key) => {\n                if (!chosenPack) {\n                    // Check the wastage (excess sweets)\n                    let wastage = remainingSize - item.sweets;\n\n                    // Get the difference between wastage and 0\n                    let difference = Math.abs(0 - wastage);\n\n                    // Check that the difference is no greater than the remaining size\n                    if (difference < remainingSize) {\n                        chosenPack = item.pack;\n                    } else {\n                        // If the wastage is more than the remaining order than try and go for a lower pack\n\n                        // Check a lower pack exists\n                        if (sortQtyAndSweets[key + 1]) {\n                            return;\n                        } else {\n                            // If a lower pack doesnt exist , use this one as it is the last\n                            chosenPack = item.pack;\n                        }\n                    }\n                }\n            });\n\n            // If it is already itemised then increase qty\n            let qKey = Object.keys(itemised).find(\n                (i) => itemised[i].pack.size === chosenPack.size\n            );\n            if (qKey) {\n                itemised[qKey].qty++;\n            } else {\n                // Else push it to the arr\n                itemised.push({ qty: 1, pack: chosenPack });\n            }\n\n            total += chosenPack.size;\n            remainingSize = remainingSize - chosenPack.size;\n        }\n\n        this.setState({\n            itemised,\n            total,\n            isOrderSuccessModalOpen: true,\n        });\n    }\n\n    getBestPacksForSize(size) {\n        let sizes = [];\n        this.props.packs.forEach((pack) => {\n            // Calculate qty of packs needed for given order size\n            let qty = Math.ceil(size / pack.size);\n            sizes.push({\n                pack,\n                qty,\n                // Calculate the total amount of sweets this will provide\n                sweets: qty * pack.size,\n            });\n        });\n        return sizes;\n    }\n\n    toggleOrderSuccessModal() {\n        this.setState({\n            isOrderSuccessModalOpen: !this.state.isOrderSuccessModalOpen,\n        });\n    }\n\n    render() {\n        if (this.state.redirectTo)\n            return <Redirect to={this.state.redirectTo} />;\n        const { loading } = this.state;\n        if (loading) return <Loading />;\n        return (\n            <div className=\"page col\">\n                <p className=\"title\">\n                    Custom Order\n                    {!this.props.auth.user ? (\n                        <span>\n                            - <Link to=\"ssc/login\">Login</Link> to order\n                        </span>\n                    ) : (\n                        \"\"\n                    )}\n                </p>\n                <Card title=\"Custom Order\">\n                    <Form\n                        onChange={this.onChange}\n                        full\n                        inputs={[\n                            {\n                                type: \"text\",\n                                name: \"size\",\n                                placeholder: \"Enter the qty\",\n                                label: \"Qty\",\n                            },\n                        ]}\n                    />\n                    <Button text=\"Order\" onClick={this.handleCustomOrder} />\n                </Card>\n                <p className=\"title title--upper_space\">Our Products</p>\n                <div className=\"cards\">\n                    {this.props.packs.map((p) => (\n                        <Card title={p.id} key={p.id}>\n                            <p className=\"title\">Qty: {p.size}</p>\n                            <Button\n                                text=\"Order\"\n                                onClick={() => {\n                                    this.handleOrder(p.id);\n                                }}\n                            />\n                        </Card>\n                    ))}\n                </div>\n                <Modal\n                    open={this.state.isOrderSuccessModalOpen}\n                    toggle={this.toggleOrderSuccessModal}\n                >\n                    <div className=\"col\">\n                        <p className=\"title\">Order Successful</p>\n                        <p className=\"title\">Qty ordered: {this.state.size}</p>\n                        {this.state.itemised && (\n                            <Fragment>\n                                {this.state.itemised.map((i, key) => (\n                                    <p key={key} className=\"item\">\n                                        x{i.qty} - {i.pack.size}\n                                    </p>\n                                ))}\n                                <p className=\"title\">\n                                    Qty shipped: {this.state.total}\n                                </p>\n                            </Fragment>\n                        )}\n                        <Button\n                            text=\"Buy more sweets\"\n                            onClick={this.toggleOrderSuccessModal}\n                            large\n                        />\n                    </div>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading, packs } = store;\n    return { auth, loading, packs };\n};\n\nexport default connect(mapStateToProps)(Order);\n","/* Action Types */\nexport const ADD_PACK = \"ADD_PACK\";\nexport const REMOVE_PACK = \"REMOVE_PACK\";\n\n/* Action Creators */\nexport function addPack(size) {\n    return { type: ADD_PACK, size };\n}\n\nexport function removePack(id) {\n    return { type: REMOVE_PACK, id };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport Loading from \"../../Components/Loading\";\nimport Button from \"../../Components/Button\";\nimport Card from \"../../Components/Card\";\nimport Modal from \"../../Components/Modal\";\nimport Form from \"../../Components/Form\";\n\nimport { removePack, addPack } from \"./../../redux/actions/packs\";\n\nclass Admin extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading: true,\n            isAddModalOpen: false,\n            size: \"\",\n        };\n\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAdd = this.handleAdd.bind(this);\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ loading: false });\n        }, 1500);\n    }\n\n    handleDelete(id) {\n        if (window.confirm(`Are you sure you want to delete pack ${id}?`)) {\n            return this.props.removePack(id);\n        }\n    }\n\n    handleAdd() {\n        if (!this.state.size) return alert(\"Please enter a qty\");\n\n        if (this.props.packs.find((p) => p.size === Number(this.state.size)))\n            return alert(\"That qty. already exists\");\n\n        this.props.addPack(this.state.size);\n        this.toggleAddModal();\n    }\n\n    onChange(name, val) {\n        this.setState({ [name]: val });\n    }\n\n    toggleAddModal() {\n        this.setState({ isAddModalOpen: !this.state.isAddModalOpen });\n    }\n\n    render() {\n        const { loading } = this.state;\n        if (loading) return <Loading />;\n        return (\n            <div className=\"page\">\n                <p className=\"title\">Packs</p>\n                <div className=\"cards\">\n                    <Card add title=\"Pack\" onClick={this.toggleAddModal} />\n                    {this.props.packs.map((p) => (\n                        <Card title={p.id} key={p.id}>\n                            <p className=\"title\">Qty: {p.size}</p>\n                            <Button\n                                text=\"Delete\"\n                                onClick={() => {\n                                    this.handleDelete(p.id);\n                                }}\n                            />\n                        </Card>\n                    ))}\n                </div>\n                <Modal\n                    open={this.state.isAddModalOpen}\n                    toggle={this.toggleAddModal}\n                >\n                    <div className=\"col\">\n                        <p className=\"title\">Add a pack</p>\n                        <Form\n                            onChange={this.onChange}\n                            modal\n                            inputs={[\n                                {\n                                    type: \"text\",\n                                    name: \"size\",\n                                    placeholder: \"Enter the qty\",\n                                    label: \"Qty\",\n                                },\n                            ]}\n                        >\n                            <Button onClick={this.handleAdd} text=\"Add\" large />\n                        </Form>\n                    </div>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading, packs } = store;\n    return { auth, loading, packs };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removePack: bindActionCreators(removePack, dispatch),\n        addPack: bindActionCreators(addPack, dispatch),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\n\nimport Loading from \"../../Components/Loading\";\n\nimport { updateAuth } from \"./../../redux/actions/auth\";\n\nclass Logout extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.updateAuth({});\n        this.setState({ loading: false });\n    }\n\n    render() {\n        const { loading } = this.state;\n        if (loading) return <Loading />;\n        return <Redirect to={\"/\"} />;\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading } = store;\n    return { auth, loading };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateAuth: bindActionCreators(updateAuth, dispatch),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logout);\n","/* Action Types */\nexport const UPDATE_PREV_PAGE = \"UPDATE_PREV_PAGE\";\n\n/* Action Creators */\nexport function updatePrevPage(path) {\n    return { type: UPDATE_PREV_PAGE, path };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Link, withRouter } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\n\nimport { updatePrevPage } from \"../../redux/actions/prevPage\";\n\n@withRouter\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {};\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleLogout = this.handleLogout.bind(this);\n        this.handleAdmin = this.handleAdmin.bind(this);\n    }\n\n    // Listen for route change\n    componentDidUpdate(prevProps) {\n        // If the route has changed\n        if (this.props.location !== prevProps.location) {\n            this.setState({ redirectTo: false });\n            if (this.props.location.pathname === \"/ssc/admin\") {\n                this.props.updatePrevPage(\"/ssc/admin\");\n            } else {\n                this.props.updatePrevPage(false);\n            }\n        }\n    }\n\n    handleLogout() {\n        this.setState({ redirectTo: \"/ssc/logout\" });\n    }\n\n    handleLogin() {\n        this.setState({ redirectTo: \"/ssc/login\" });\n    }\n\n    handleAdmin() {\n        this.setState({ redirectTo: \"/ssc/admin\" });\n    }\n\n    render() {\n        if (this.state.redirectTo)\n            return <Redirect to={{ pathname: this.state.redirectTo }} />;\n        return (\n            <div className=\"header\">\n                <div className=\"header_options\">\n                    {(!this.props.auth.user ||\n                        (this.props.auth.user &&\n                            this.props.auth.isAdmin &&\n                            this.props.location.pathname !== \"/ssc/admin\")) &&\n                    this.props.location.pathname !== \"/ssc/login\" ? (\n                        <p\n                            className=\"header_options_option\"\n                            onClick={this.handleAdmin}\n                        >\n                            Admin\n                        </p>\n                    ) : (\n                        <p className=\"header_options_option\"></p>\n                    )}\n                    {this.props.auth.user ? (\n                        <p\n                            className=\"header_options_option\"\n                            onClick={this.handleLogout}\n                        >\n                            Logout\n                        </p>\n                    ) : this.props.location.pathname !== \"/ssc/login\" ? (\n                        <p\n                            className=\"header_options_option\"\n                            onClick={this.handleLogin}\n                        >\n                            Login\n                        </p>\n                    ) : null}\n                </div>\n                <a\n                    onClick={(e) => {\n                        e.preventDefault();\n                        this.setState({ redirectTo: \"/ssc\" });\n                    }}\n                >\n                    <p className=\"header_text\">Simons Sweet Co.</p>\n                </a>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading } = store;\n    return { auth, loading };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updatePrevPage: bindActionCreators(updatePrevPage, dispatch),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\n// TODO: figure out best way to redirect to admin\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport Login from \"./Containers/Pages/Login\";\nimport Order from \"./Containers/Pages/Order\";\nimport Admin from \"./Containers/Pages/Admin\";\nimport Logout from \"./Containers/Pages/Logout\";\n\nimport Header from \"./Components/Header/index\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Header />\n                    <Switch>\n                        <Route path=\"/ssc/logout\" exact component={Logout} />\n                        <Route\n                            path=\"/ssc/login\"\n                            exact\n                            render={() => {\n                                return this.props.auth.user ? (\n                                    <Redirect to=\"/ssc\" />\n                                ) : (\n                                    <Login />\n                                );\n                            }}\n                        />\n                        <Route\n                            exact\n                            path=\"/ssc/admin\"\n                            render={() => {\n                                return !this.props.auth.isAdmin ? (\n                                    <Redirect to=\"/ssc/login\" />\n                                ) : (\n                                    <Admin />\n                                );\n                            }}\n                        />\n                        <Route exact component={Order} />\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    const { auth, loading } = store;\n    return { auth, loading };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_AUTH } from \"./../actions/auth\";\n\n// Define initial state\nconst initialState = {\n    isAdmin: false,\n    user: false,\n};\n\nexport function auth(state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_AUTH:\n            return action.auth;\n        default:\n            return state;\n    }\n}\n","import { UPDATE_PAGE_LOADING } from \"./../actions/loading\";\n\n// Define initial state\nconst initialState = {\n    page: true,\n};\n\nexport function loading(state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_PAGE_LOADING:\n            let newState = Object.assign({}, state);\n            newState.page = action.loading;\n            return newState;\n        default:\n            return state;\n    }\n}\n","import { ADD_PACK, REMOVE_PACK } from \"./../actions/packs\";\n\n// Define initial state\nconst initialState = [\n    { id: 1, size: 250 },\n    { id: 2, size: 500 },\n    { id: 3, size: 1000 },\n    { id: 4, size: 2000 },\n    { id: 5, size: 5000 },\n];\n\nexport function packs(state = initialState, action) {\n    let newPacks = [];\n    switch (action.type) {\n        case ADD_PACK:\n            let id = 1;\n            state.forEach((pack) => {\n                newPacks.push({ id, size: pack.size });\n                id++;\n            });\n            newPacks.push({ id, size: Number(action.size) });\n            return newPacks;\n        case REMOVE_PACK:\n            state.forEach((pack, i) => {\n                if (pack.id !== Number(action.id))\n                    newPacks.push({ id: i + 1, size: pack.size });\n            });\n            return newPacks;\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\n\nimport { auth } from \"./auth\";\nimport { loading } from \"./loading\";\nimport { prevPage } from \"./prevPage\";\nimport { packs } from \"./packs\";\n\nconst rootReducer = combineReducers({\n    auth,\n    loading,\n    prevPage,\n    packs,\n});\n\nexport default rootReducer;\n","/* Action Types */\nexport const UPDATE_PAGE_LOADING = \"UPDATE_PAGE_LOADING\";\n\n/* Action Creators */\nexport function updatePageLoading(loading) {\n    return { type: UPDATE_PAGE_LOADING, loading };\n}\n","import { UPDATE_PREV_PAGE } from \"./../actions/prevPage\";\n\n// Define initial state\nconst initialState = \"/\";\n\nexport function prevPage(state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_PREV_PAGE:\n            return action.path;\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport rootReducer from \"./../reducers\";\n\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\"auth\", \"packs\"],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nlet store = createStore(persistedReducer);\nlet persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store, persistor } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}